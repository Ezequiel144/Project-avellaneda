---
import Map from "../components/Maps/Map/Map";
import SearchMap from "../components/Maps/SearchMap/SearchMap";
import { normalizeString } from "../helpers/deleteAcent";
//import listBusiness from "../data/business.data.json";
import ContentCardMap from "../components/Maps/ContentCardMap/ContentCardMap";
import type { BusinessItemCardMap } from "../interface";
import Layout from "../layouts/Layout.astro";
import { strapiFetch } from "../utils/fetch";

const addressQuery = Astro.url.searchParams.get("q");
const getQuerySearch = Astro.url.searchParams.get("s");

const res = await strapiFetch(
  "/businesses?fields[0]=title&fields[1]=shortdescription&populate[imagelogo][fields][0]=url&populate[tags][fields][0]=*&populate[directions]=*",
  {
    method: "GET",
  }
);
/* const listBusiness = getQuerySearch
  ? res.data.filter((item: BusinessItemCardMap) => {
      //1.Condicion para el titulo
      const isTitle = normalizeString(item.title)
        .toLocaleLowerCase()
        .includes(normalizeString(getQuerySearch).toLocaleLowerCase());

      // 2. Condición para la descripción
      const isDescriptionMatch = normalizeString(
        item.shortdescription?.toLocaleLowerCase()
      ).includes(normalizeString(getQuerySearch.toLocaleLowerCase()));

      // 3. Condición para los tags
      const isTagMatch = item.tags?.some(
        (tag) =>
          normalizeString(tag.itemtag.toLocaleLowerCase()) ===
          normalizeString(getQuerySearch.toLocaleLowerCase())
      );
      return isTitle || isDescriptionMatch || isTagMatch;
    })
  : res.data; */
---

<Layout>
  <div class="size-full">
    <Map client:visible addressQuery={addressQuery} />
    <div
      class="absolute bottom-2 left-1/2 -translate-x-1/2 flex flex-col gap-y-2"
    >
      <SearchMap client:idle />
      <ContentCardMap client:idle />
    </div>
  </div>
</Layout>
